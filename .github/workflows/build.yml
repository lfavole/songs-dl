name: Build songs-dl

on:
  push:
    branches: ["main"]
    tags: ["*"]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: pyproject.toml
        cache: pip

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .[build]

    - name: Build executable
      run: |
        python pyinst.py

    - name: Build package
      run: |
        python -m build

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}
        path: dist/**

  release:
    name: Create release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        pattern: build-*
        merge-multiple: true

    - name: Create GitHub release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ github.ref_name }}'
        --title 'Release ${{ github.ref_name }}'
        --repo '${{ github.repository }}'
        --notes ""

    - name: Upload artifacts to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'

  publish:
    name: Publish package to PyPI
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        pattern: build-*
        merge-multiple: true

    - name: Remove non-release files
      shell: python
      run: |
        from pathlib import Path
        for path in Path("dist").iterdir():
            if not path.name.endswith((".whl", ".tar.gz")):
                print(f"Removing {path.name}")
                path.unlink()

    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  build-docs:
    name: Build the documentation
    needs: build

    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: pyproject.toml

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: docs-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          docs-pip-

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        pattern: build-*
        merge-multiple: true

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .[docs]

    - name: Copy the built files into the documentation
      run: python copy_build_into_docs.py

    - name: Build the documentation
      run: mkdocs build

    - name: Upload GitHub Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: site/

  deploy:
    name: Deploy to GitHub Pages
    needs: build-docs

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
